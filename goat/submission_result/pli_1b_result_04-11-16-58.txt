============================================
vis/aluo1.out
16:56:54_Sunday_14_April_2019
============================================
COMP90045 project - Test of parser and pretty-printer
User:  aluo1

--- Makefile found ---
--- Running Makefile ---
ghc Goat.hs -o Goat
[1 of 5] Compiling GoatAST          ( GoatAST.hs, GoatAST.o )
[2 of 5] Compiling GoatExit         ( GoatExit.hs, GoatExit.o )
[3 of 5] Compiling GoatParser       ( GoatParser.hs, GoatParser.o )
[4 of 5] Compiling GoatPrettyPrint  ( GoatPrettyPrint.hs, GoatPrettyPrint.o )
[5 of 5] Compiling Main             ( Goat.hs, Goat.o )
Linking Goat ...

--- Succeeded to create a file called Goat ---

**********************************************   Parsing assoc.gt:
Mismatch:
--- assoc.out	2019-04-09 21:09:49.000000000 +1000
+++ /dev/fd/63	2019-04-14 16:56:53.165311779 +1000
@@ -3,3 +3,4 @@
 begin
     n := ((4 + 7) - (-9 * 1)) - 6;
 end
+
**********************************************   Parsing bell.gt:
Mismatch:
--- bell.out	2019-04-09 21:09:49.000000000 +1000
+++ /dev/fd/63	2019-04-14 16:56:53.173311753 +1000
@@ -26,3 +26,4 @@
         out := res1 + res2;
     fi
 end
+
**********************************************   Parsing gcd.gt:
Mismatch:
--- gcd.out	2019-04-09 21:09:49.000000000 +1000
+++ /dev/fd/63	2019-04-14 16:56:53.182311725 +1000
@@ -30,3 +30,4 @@
     write y;
     write "\n";
 end
+
**********************************************   Parsing hail.gt:
Mismatch:
--- hail.out	2019-04-09 21:09:49.000000000 +1000
+++ /dev/fd/63	2019-04-14 16:56:53.191311697 +1000
@@ -27,3 +27,4 @@
         out := count + 1;
     fi
 end
+
**********************************************   Parsing matrixmul.gt:
Rejected valid program
**********************************************   Parsing power.gt:
Mismatch:
--- power.out	2019-04-09 21:09:49.000000000 +1000
+++ /dev/fd/63	2019-04-14 16:56:53.206311650 +1000
@@ -27,3 +27,4 @@
         fi
     fi
 end
+
**********************************************   Parsing q1.gt:
Mismatch:
--- q1.out	2019-04-09 21:09:49.000000000 +1000
+++ /dev/fd/63	2019-04-14 16:56:53.214311624 +1000
@@ -13,3 +13,4 @@
     write n;
     write "\n";
 end
+
**********************************************   Parsing q2.gt:
Mismatch:
--- q2.out	2019-04-09 21:09:49.000000000 +1000
+++ /dev/fd/63	2019-04-14 16:56:53.223311596 +1000
@@ -6,3 +6,4 @@
     write a[0, 2];
     write "\n";
 end
+
**********************************************   Parsing q3.gt:
Mismatch:
--- q3.out	2019-04-09 21:09:49.000000000 +1000
+++ /dev/fd/63	2019-04-14 16:56:53.231311571 +1000
@@ -11,3 +11,4 @@
 begin
     call f(1, 1, 0, 2);
 end
+
**********************************************   Parsing q4.gt:
Mismatch:
--- q4.out	2019-04-09 21:09:49.000000000 +1000
+++ /dev/fd/63	2019-04-14 16:56:53.240311543 +1000
@@ -11,3 +11,4 @@
 begin
     n := n + 1;
 end
+
**********************************************   Parsing sort.gt:
Rejected valid program
**********************************************   Parsing stddev.gt:
Mismatch:
--- stddev.out	2019-04-09 21:09:49.000000000 +1000
+++ /dev/fd/63	2019-04-14 16:56:53.254311499 +1000
@@ -24,3 +24,4 @@
     write (sumsq / count) - (mean * mean);
     write "\n";
 end
+
**********************************************   Parsing missing_rel.bad.gt:
Okay
**********************************************   Parsing mode1.bad.gt:
Okay
**********************************************   Parsing mode2.bad.gt:
Okay
**********************************************   Parsing mode3.bad.gt:
Okay
**********************************************   Parsing mode4.bad.gt:
Okay
**********************************************   Parsing multivar1.bad.gt:
Okay
6 of 18 tests passed.

--- End of testing for aluo1 ---

============================================
src/Goat.hs
16:56:48_Sunday_14_April_2019
============================================
module Main where

import GoatAST
import GoatParser
import GoatPrettyPrint
import GoatExit
import Text.Parsec (runParser)
import System.Environment (getArgs, getProgName)

checkArgs :: String -> [String] -> IO Task
checkArgs _ ['-':_] = exitWithError "Missing filename" MissingFile
checkArgs _ [filename] = return Compile
checkArgs _ ["-p", filename] = return Pprint
checkArgs _ ["-a", filename] = return Parse
checkArgs progname _  = exitWithError ("Usage: " ++ progname ++ " [-p] filename") WrongUsage

main :: IO ()
main
  = do
     progname <- getProgName
     args <- getArgs
     task <- checkArgs progname args
     if task == Compile then
       do
         exitWithSuccess "Sorry, cannot generate code yet"
     else
       if task == Parse then
         do
           let [_, filename] = args
           input <- readFile filename
           let output = runParser pMain 0 "" input
           case output of
             Right ast -> print ast -- print ast
             Left  err -> do { exitWithError ("Parse error at " ++ show(err)) ParseError
                             ; return ()
                             }
       else
         do
           let [_, filename] = args
           input <- readFile filename
           -- let output = ast input
           let output = runParser pMain 0 "" input
           case output of
             Right ast -> prettyPrint ast -- print ast
             Left  err -> do { exitWithError ("Parse error at " ++ show(err)) ParseError
                             ; return ()
                             }
============================================
src/GoatAST.hs
16:56:48_Sunday_14_April_2019
============================================
module GoatAST where

type Ident = String

data PType
    = BoolType
    | IntType
    | FloatType
    deriving (Show, Eq)

data Variable
    = Variable
    { varId                :: Ident
    , varSIndicator        :: SIndicator
    } deriving (Show, Eq)


data Expr
    = ExprVar
        { exprVar          :: Variable }
    | BoolConst
        { boolConstVal     :: Bool }
    | IntConst
        { intConstVal      :: Int }
    | FloatConst
        { floatConstVal    :: Float }
    | StrConst
        { strConstVal      :: String }
    | Add
        { addLeftExpr      :: Expr
        , addRightExpr     :: Expr
        }
    | Mul
        { mulLeftExpr      :: Expr
        , mulRightExpr     :: Expr
        }
    | Sub
        { subLeftExpr      :: Expr
        , subRightExpr     :: Expr
        }
    | Div
        { divLeftExpr      :: Expr
        , divRightExpr     :: Expr
        }
    | Or
        { orLeftExpr       :: Expr
        , orRightExpr      :: Expr
        }
    | And
        { andLeftExpr      :: Expr
        , andRightExpr     :: Expr
        }
    | Eq
        { eqLeftExpr       :: Expr
        , eqRightExpr      :: Expr
        }
    | NotEq
        { notEqLeftExpr    :: Expr
        , notEqRightExpr   :: Expr
        }
    | Les
        { lesLeftExpr      :: Expr
        , lesRightExpr     :: Expr
        }
    | LesEq
        { lesEqLeftExpr    :: Expr
        , lesEqRightExpr   :: Expr
        }
    | Grt
        { grtLeftExpr      :: Expr
        , grtRightExpr     :: Expr
        }
    | GrtEq
        { grtEqLeftExpr    :: Expr
        , grtEqRightExpr   :: Expr
        }
    | UnaryMinus
        { unaryMinusExpr   :: Expr }
    | UnaryNot
        { unaryNotExpr     :: Expr }
    deriving (Show, Eq)

data VDecl
    = VDecl
    { vdeclType            :: PType
    , vdeclVar             :: Variable
    } deriving (Show, Eq)

data Stmt
    = Assign
        { assignVal        :: Variable
        , assignExpr       :: Expr
        }
    | Read
        { readVal          :: Variable }
    | Write
        { writeExpr        :: Expr }
    | Call
        { callIdent        :: Ident
        , callExprs        :: [Expr]
        }
    | If
        { ifExpr           :: Expr
        , ifStmts          :: [Stmt]
        }
    | IfElse
        { ifElseExpr       :: Expr
        , ifElseStmts1     :: [Stmt]
        , ifElseStmts2     :: [Stmt]
        }
    | While
        { whileExpr        :: Expr
        , whileStmts       :: [Stmt]
        }
    deriving (Show, Eq)

data Body
    = Body
    { bodyVarDeclarations  :: [VDecl]
    , bodyStatements       :: [Stmt]
    } deriving (Show, Eq)

data PIndicator
    = VarType
    | RefType
    deriving (Show, Eq)

data SIndicator
    = Array
      { arrayExpr          :: Expr }
    | Matrix
      { matrixMExpr        :: Expr
      , matrixNExpr        :: Expr
      }
    | NoIndicator
    deriving (Show, Eq)

data Parameter
    = Parameter
    { passingIndicator     :: PIndicator
    , passingType          :: PType
    , passingIdent         :: Ident
    } deriving (Show, Eq)

data Header
    = Header
    { headerIdent          :: Ident
    , parameters           :: [Parameter]
    } deriving (Show, Eq)

data Procedure
    = Procedure
    { header               :: Header
    , body                 :: Body
    } deriving (Show, Eq)

data GoatProgram
    = GoatProgram
    { procedures           :: [Procedure]
    } deriving (Show, Eq)
============================================
src/Makefile
16:56:47_Sunday_14_April_2019
============================================
Goat: Goat.hs GoatParser.hs GoatAST.hs GoatPrettyPrint.hs
	ghc Goat.hs -o Goat

clean:
	rm -f *.o *.hi *.out
	rm -f Goat

============================================
src/GoatExit.hs
16:56:48_Sunday_14_April_2019
============================================
module GoatExit where

import System.Exit

data Task = Unit | Exit | Compile | Pprint | Parse deriving Eq

-----------------------------------------------------------------
-- Exit code constant, it starts from 0, increase by 1.
-----------------------------------------------------------------
data GoatExitCode = Success       -- 0
                  | MissingFile   -- 1
                  | WrongUsage    -- 2
                  | MissingMain   -- 3
                  | MultipleMain  -- 4
                  | MainWithParam -- 5
                  | ParseError    -- 6
                  deriving Enum


-- Exit message constant

exitWithSuccess :: String -> IO ()
exitWithSuccess message = do
  putStrLn (message)
  exitWith ExitSuccess

-----------------------------------------------------------------
-- print error message to stderr and exit
-----------------------------------------------------------------
exitWithError :: String -> GoatExitCode -> IO Task
exitWithError message exitCode = do
    putStrLn ("[ERROR] " ++ message)
    exitWith (ExitFailure $ fromEnum exitCode)
============================================
src/GoatPrettyPrint.hs
16:56:49_Sunday_14_April_2019
============================================
module GoatPrettyPrint where

import GoatAST
import GoatExit
import System.Exit

-- TODO should trace line number
-- exitWithSuccess :: String -> IO ()
-- exitWithSuccess message = do
--   putStrLn message
--     exitWith ExitSuccess

-----------------------------------------------------------------
-- print error message to stderr and exit
-----------------------------------------------------------------
-- exitWithError :: String -> Int -> IO ()
-- exitWithError message  = do
--     putStrLn ("[ERROR] " ++ message)
--     exitWith (ExitFailure )

-----------------------------------------------------------------
-- print indention
-----------------------------------------------------------------
printIndent :: Int -> IO ()
printIndent 0 = return ()
printIndent indent = do
    { putStr " "
    ; printIndent (indent - 1)
    }

-----------------------------------------------------------------
-- print BaseType such as bool, float and int
-----------------------------------------------------------------
printBaseType :: PType -> IO ()
printBaseType baseType = do
    case baseType of
        BoolType  -> putStr "bool"
        IntType   -> putStr "int"
        FloatType -> putStr "float"

-----------------------------------------------------------------
-- print Passing Indicator type such as "val" and "ref"
-----------------------------------------------------------------
printPassIndicator :: PIndicator -> IO ()
printPassIndicator pIndicator = do
    case pIndicator of
        VarType   -> putStr "val"
        RefType   -> putStr "ref"

-----------------------------------------------------------------
-- get String of shape Indicator type such as Array and Matrix
-----------------------------------------------------------------
getSIndicator :: SIndicator -> String
getSIndicator sIndicator =
    case sIndicator of
        NoIndicator -> ""
        Array  n    -> "[" ++ (getTopExpr n) ++ "]"
        Matrix m n  -> "[" ++ (getTopExpr m) ++ ", " ++ (getTopExpr n) ++ "]"

-----------------------------------------------------------------
-- get String of variable in form id, id[n] or id[m,n]
-----------------------------------------------------------------
getVariable :: Variable -> String
getVariable var = (varId var) ++ (getSIndicator $ varSIndicator var)

-----------------------------------------------------------------
-- print Parameters of procedure
-----------------------------------------------------------------
printParameters :: [Parameter] -> String -> IO ()
printParameters [] _                     = return ()
printParameters (param:params) seperator = do
    { putStr seperator
    ; printPassIndicator $ passingIndicator param
    ; putStr " "
    ; printBaseType $ passingType param
    ; putStr " "
    ; putStr $ passingIdent param
    ; printParameters (params) ", "
    }

-----------------------------------------------------------------
-- print Header
-----------------------------------------------------------------
printHeader :: Header -> IO ()
printHeader header = do
    { putStr   "proc "
    ; putStr $ headerIdent $ header
    ; putStr   " ("
    ; printParameters (parameters $ header) ""
    ; putStr   ")"
    ; putStrLn ""
    }

-----------------------------------------------------------------
-- print variables declaration
-----------------------------------------------------------------
printVdecl :: [VDecl] -> IO ()
printVdecl []           = return ()
printVdecl (vdecl:vdels) = do
    { printIndent 4
    ; printBaseType $ vdeclType vdecl
    ; putStr " "
    ; putStr $ getVariable $ vdeclVar vdecl
    ; putStr   ";"
    ; putStrLn ""
    ; printVdecl vdels
    }

-----------------------------------------------------------------
-- print Assignment Statements such as n := 34;
-----------------------------------------------------------------
printAssignStmt :: Variable -> Expr -> Int -> IO ()
printAssignStmt var expr indent = do
    { printIndent indent
    ; putStr $ getVariable var
    ; putStr " := "
    ; putStr $ getTopExpr expr
    ; putStrLn ";"
    }

-----------------------------------------------------------------
-- print Read Statements such as read n[3,5];
-----------------------------------------------------------------
printReadStmt :: Variable -> Int -> IO ()
printReadStmt var indent = do
    { printIndent indent
    ; putStr "read "
    ; putStr $ getVariable var
    ; putStrLn ";"
    }

-----------------------------------------------------------------
-- print Write Statements such as write 3 + 5;
-----------------------------------------------------------------
printWriteStmt :: Expr -> Int -> IO ()
printWriteStmt expr indent = do
    { printIndent indent
    ; putStr "write "
    ; putStr $ getTopExpr expr
    ; putStrLn ";"
    }

-----------------------------------------------------------------
-- print Call Statements such as call n(3 + 5);
-----------------------------------------------------------------
printCallStmt :: Ident -> [Expr] -> Int -> IO ()
printCallStmt id exprs indent = do
    { printIndent indent
    ; putStr "call "
    ; putStr id
    ; putStr "("
    ; printExprs exprs ""
    ; putStr ")"
    ; putStrLn ";"
    }

-----------------------------------------------------------------
-- print the common part of If Statements and If-Else Statements
-----------------------------------------------------------------
printIfCommon :: Expr -> [Stmt] -> Int -> IO ()
printIfCommon expr stmts indent = do
    { printIndent indent
    ; putStr "if "
    ; printExprs [expr] ""
    ; putStrLn " then"
    ; printStatements stmts (indent + 4)
    }

-----------------------------------------------------------------
-- print the end part of If Statements and If-Else Statements
-----------------------------------------------------------------
printIfEnd :: Int -> IO ()
printIfEnd indent = do
    { printIndent indent
    ; putStrLn "fi"
    }

-----------------------------------------------------------------
-- print If Statements
-----------------------------------------------------------------
printIfStmt :: Expr -> [Stmt] -> Int -> IO ()
printIfStmt expr stmts indent = do
    { printIfCommon expr stmts indent
    ; printIfEnd indent
    }

-----------------------------------------------------------------
-- print If-Else Statements
-----------------------------------------------------------------
printIfElseStmt :: Expr -> [Stmt] -> [Stmt] -> Int -> IO ()
printIfElseStmt expr stmts1 stmts2 indent = do
    { printIfCommon expr stmts1 indent
    ; printIndent indent
    ; putStrLn "else"
    ; printStatements stmts2 (indent + 4)
    ; printIfEnd indent
    }

-----------------------------------------------------------------
-- print While Statements
-----------------------------------------------------------------
printWhileStmt :: Expr -> [Stmt] -> Int -> IO ()
printWhileStmt expr stmts indent = do
    { printIndent indent
    ; putStr "while "
    ; printExprs [expr] ""
    ; putStrLn " do"
    ; printStatements stmts (indent + 4)
    ; printIndent indent
    ; putStrLn "od"
    }

-----------------------------------------------------------------
-- print Statement
-----------------------------------------------------------------
printStatement :: Stmt -> Int -> IO ()
printStatement stmt indent = do
    case stmt of
        Assign var  expr          -> printAssignStmt var  expr   indent
        Read   var                -> printReadStmt   var  indent
        Write  expr               -> printWriteStmt  expr indent
        Call   id   exprs         -> printCallStmt   id   exprs  indent
        If     expr stmts         -> printIfStmt     expr stmts  indent
        IfElse expr stmts1 stmts2 -> printIfElseStmt expr stmts1 stmts2 indent
        While  expr stmts         -> printWhileStmt  expr stmts  indent

-----------------------------------------------------------------
-- print list of Statement
-----------------------------------------------------------------
printStatements :: [Stmt] -> Int -> IO ()
printStatements [] _                = return ()
printStatements (stmt:stmts) indent = do
    { printStatement stmt indent
    ; printStatements stmts indent
    }

-----------------------------------------------------------------
-- converte const variable to String
-----------------------------------------------------------------
getConst :: (Show a) => a -> String
getConst a = show a

-----------------------------------------------------------------
-- get string of result using infix operator
-----------------------------------------------------------------
getInfixOpResult :: Expr -> String -> Expr -> String
getInfixOpResult lExpr op rExpr = (getExpr lExpr) ++ op ++ (getExpr rExpr)

-----------------------------------------------------------------
-- get string of result using prefix operator
-----------------------------------------------------------------
getPrefixOpResult :: Expr -> String -> String
getPrefixOpResult expr op = op ++ (getExpr expr)

-----------------------------------------------------------------
-- print list of expressions
-----------------------------------------------------------------
printExprs :: [Expr] -> String -> IO ()
printExprs [] _                   = return ()
printExprs (expr:exprs) seperator = do
    { putStr seperator
    ; putStr $ getTopExpr expr
    ; printExprs exprs ", "
    }

-----------------------------------------------------------------
-- print the root of expresssion which should no surrounded by ()
-----------------------------------------------------------------
getTopExpr :: Expr -> String
getTopExpr expr =
    case expr of
        ExprVar     var   -> getVariable var
        BoolConst   val   -> getConst val
        IntConst    val   -> getConst val
        FloatConst  val   -> getConst val
        StrConst    val   -> "\"" ++ val ++ "\""
        Add   lExpr rExpr -> getInfixOpResult  lExpr " + "  rExpr
        Mul   lExpr rExpr -> getInfixOpResult  lExpr " * "  rExpr
        Sub   lExpr rExpr -> getInfixOpResult  lExpr " - "  rExpr
        Div   lExpr rExpr -> getInfixOpResult  lExpr " / "  rExpr
        Or    lExpr rExpr -> getInfixOpResult  lExpr " || " rExpr
        And   lExpr rExpr -> getInfixOpResult  lExpr " && " rExpr
        Eq    lExpr rExpr -> getInfixOpResult  lExpr " = "  rExpr
        NotEq lExpr rExpr -> getInfixOpResult  lExpr " != " rExpr
        Les   lExpr rExpr -> getInfixOpResult  lExpr " < "  rExpr
        LesEq lExpr rExpr -> getInfixOpResult  lExpr " <= " rExpr
        Grt   lExpr rExpr -> getInfixOpResult  lExpr " > "  rExpr
        GrtEq lExpr rExpr -> getInfixOpResult  lExpr " >= " rExpr
        UnaryMinus  expr  -> getPrefixOpResult expr "-"
        UnaryNot    expr  -> getPrefixOpResult expr "!"

-----------------------------------------------------------------
-- print the non-root of expresssion which might surrounded by ()
-----------------------------------------------------------------
getExpr :: Expr -> String
getExpr expr =
    case expr of
        ExprVar     var   -> getVariable var
        BoolConst   val   -> getConst val
        IntConst    val   -> getConst val
        FloatConst  val   -> getConst val
        StrConst    val   -> "\"" ++ val ++ "\""
        Add   lExpr rExpr -> "(" ++ getInfixOpResult lExpr " + "  rExpr ++ ")"
        Mul   lExpr rExpr -> "(" ++ getInfixOpResult lExpr " * "  rExpr ++ ")"
        Sub   lExpr rExpr -> "(" ++ getInfixOpResult lExpr " - "  rExpr ++ ")"
        Div   lExpr rExpr -> "(" ++ getInfixOpResult lExpr " / "  rExpr ++ ")"
        Or    lExpr rExpr -> "(" ++ getInfixOpResult lExpr " || " rExpr ++ ")"
        And   lExpr rExpr -> "(" ++ getInfixOpResult lExpr " && " rExpr ++ ")"
        Eq    lExpr rExpr -> "(" ++ getInfixOpResult lExpr " = "  rExpr ++ ")"
        NotEq lExpr rExpr -> "(" ++ getInfixOpResult lExpr " != " rExpr ++ ")"
        Les   lExpr rExpr -> "(" ++ getInfixOpResult lExpr " < "  rExpr ++ ")"
        LesEq lExpr rExpr -> "(" ++ getInfixOpResult lExpr " <= " rExpr ++ ")"
        Grt   lExpr rExpr -> "(" ++ getInfixOpResult lExpr " > "  rExpr ++ ")"
        GrtEq lExpr rExpr -> "(" ++ getInfixOpResult lExpr " >= " rExpr ++ ")"
        UnaryMinus  expr  -> getPrefixOpResult expr "-"
        UnaryNot    expr  -> getPrefixOpResult expr "!"

-----------------------------------------------------------------
-- print Body
-----------------------------------------------------------------
printBody :: Body -> IO ()
printBody body = do
    { printVdecl $ bodyVarDeclarations body
    ; putStrLn "begin"
    ; printStatements (bodyStatements body) 4
    ; putStrLn "end"
    ; putStrLn ""
    }

-----------------------------------------------------------------
-- print Procedure
-----------------------------------------------------------------
printProc :: [Procedure] -> IO ()
printProc []           = return ()
printProc (proc:procs) = do
    { printHeader $ header proc
    ; printBody $ body proc
    ; printProc (procs)
    }

-----------------------------------------------------------------
-- check whether the main procedure is parameter-less
-----------------------------------------------------------------
checkMainParam :: [Parameter] -> IO Task
checkMainParam [] = return Unit
checkMainParam _  = exitWithError "'main()' procedure should be parameter-less." MainWithParam

-----------------------------------------------------------------
-- check the number of main procedure
-----------------------------------------------------------------
checkMainNum :: Int -> IO Task
checkMainNum numMain
    | 0 == numMain = exitWithError "There is no 'main()' procedure." MissingMain
    | 1 == numMain = return Unit
    | otherwise = exitWithError "There is more than one 'main()' procedure" MultipleMain

-----------------------------------------------------------------
-- get the number of main procedure
-----------------------------------------------------------------
countMain :: [Procedure] -> [Procedure]
countMain [] = []
countMain (proc:procs)
    | "main" == (headerIdent $ header proc) = proc : countMain procs
    | otherwise = countMain procs


-----------------------------------------------------------------
-- main entry of prettyPrint module
-----------------------------------------------------------------
prettyPrint :: GoatProgram -> IO ()
prettyPrint program = do
    { let mainList = countMain $ procedures program
    ; checkMainNum $ length $ mainList
    ; checkMainParam $ parameters $ header $ head mainList
    ; printProc (procedures program)
    }
============================================
src/GoatParser.hs
16:56:49_Sunday_14_April_2019
============================================
module GoatParser where

import GoatAST
import Text.Parsec
import Text.Parsec.Expr
import Text.Parsec.Language (emptyDef)
import qualified Text.Parsec.Token as Q

-----------------------------------------------------------------
-- define lexer, reserved words and reserved operator
-----------------------------------------------------------------
type Parser a
    = Parsec String Int a

lexer :: Q.TokenParser Int
lexer
  = Q.makeTokenParser
    (emptyDef
    { Q.commentLine     = "#"
    , Q.nestedComments  = True
    , Q.identStart      = letter
    , Q.identLetter     = alphaNum <|> char '_' <|> char '\''
    , Q.opStart         = oneOf "+-*:"
    , Q.opLetter        = oneOf "+-*:=<>!|&"
    , Q.reservedNames   = myReserved
    , Q.reservedOpNames = myOpnames
    })

whiteSpace = Q.whiteSpace lexer
lexeme     = Q.lexeme lexer
natural    = Q.natural lexer
float      = Q.float lexer
decimal    = Q.decimal lexer
identifier = Q.identifier lexer
colon      = Q.colon lexer
semi       = Q.semi lexer
comma      = Q.comma lexer
dot        = Q.dot lexer
parens     = Q.parens lexer
squares    = Q.squares lexer
reserved   = Q.reserved lexer
reservedOp = Q.reservedOp lexer

myReserved, myOpnames :: [String]

myReserved
  = ["begin", "bool", "call" , "do"  , "else", "end",
     "false", "fi"  , "float", "if"  , "int" , "od",
     "proc" , "read", "ref"  , "then", "true", "val",
     "while", "write"]

myOpnames
  = ["+" , "-" , "*", "<", ">", "<=", ">=", "=", "!=",
     "||", "&&", "!", "/", ":="]

-----------------------------------------------------------------
-- pProg is the topmost parsing function. It looks for a program
-- which contains one or more procedures
-----------------------------------------------------------------

pProg :: Parser GoatProgram
pProg = do
    procedures <- many1 pProcedure
    return (GoatProgram procedures)
    <?> "program procedure"

-----------------------------------------------------------------
-- pProcedure looks for a procedure, which contains "proc"
-- + header + "begin" + body + "end"
-----------------------------------------------------------------

pProcedure :: Parser Procedure
pProcedure = do
    reserved "proc"
    header    <- pProgHeader
    body      <- pProgBody
    return (Procedure header body)
    <?> "procedure"

-----------------------------------------------------------------
-- pProgHeader looks for the program header, which contains a
-- function name followed by serveral parameters and variable
-- declarations
-----------------------------------------------------------------

pProgHeader :: Parser Header
pProgHeader = do
    ident     <- identifier
    char '('
    whiteSpace
    params    <- sepBy pParameter comma
    char ')'
    whiteSpace
    -- newline
    -- whiteSpace
    return (Header ident params)
    <?> "procedure header"

-----------------------------------------------------------------
-- parameters := (val|ref) (int|float|bool) identifier
-----------------------------------------------------------------

pParameter :: Parser Parameter
pParameter = do
    pidcat    <-  pPIndicator
    ptype     <-  pPtype
    ident     <-  identifier
    return (Parameter pidcat ptype ident)
    <?> "parameters"

pPIndicator :: Parser PIndicator
pPIndicator
  = do { reserved "val"; return VarType }
    <|>
    do { reserved "ref"; return RefType }
    <?> "passing indicator type"

pPtype :: Parser PType
pPtype
  = do { reserved "bool"; return BoolType }
    <|>
    do { reserved "int"; return IntType }
    <|>
    do { reserved "float"; return FloatType }
    <?> "base type indicator"

-----------------------------------------------------------------
-- pProgBody looks for body, which contains one or more statements
-----------------------------------------------------------------

pProgBody :: Parser Body
pProgBody = do
    vdecls <- many pVDecl
    reserved "begin"
    stmts  <- many1 pStmt
    reserved "end"
    return (Body vdecls stmts)
    <?> "procedure body"

-----------------------------------------------------------------
-- variable declarations
-- vdecl := (int|float|bool) identifier (shape indicator)
-- shape indicator
-- determine whether a identifier is an array, a matrix or
-- no indicator
-----------------------------------------------------------------

pVDecl :: Parser VDecl
pVDecl = do
    ptype  <- pPtype
    ident  <- identifier
    sidcat <- pSIndicator
    semi
    return (VDecl ptype (Variable ident sidcat))
    <?> "procedure variable declaration"

pSIndicator :: Parser SIndicator
pSIndicator =
    try (do { char '['
            ; n <- pNum
            ; char ']'
            ; return (Array n)
            }
        )
    <|>
    try (do { char '['
            ; m <- pNum
            ; comma
            ; n <- pNum
            ; char ']'
            ; return (Matrix m n)
            })
    <|>  do { return (NoIndicator) }
    <?> "shape indicator"

-----------------------------------------------------------------
-- define statements
-- statement contains read, asgin, write, call, if, ifelse, while
-----------------------------------------------------------------

pStmt, pAsg, pRead, pWrite, pCall, pIf, pWhile :: Parser Stmt

pStmt
  = choice [pAsg, pRead, pWrite, pCall, pIf, pWhile]
    <?> "statement"

pRead = do
    reserved "read"
    ident  <- identifier
    sidcat <- pExprSIndicator
    semi
    return (Read (Variable ident sidcat))
    <?> "read statement"

pWrite = do
    reserved "write"
    exp <- (pString <|> pExp)
    semi
    return (Write exp)
    <?> "write statement"

pAsg = do
    ident  <- identifier
    sidcat <- pExprSIndicator
    whiteSpace
    reservedOp ":="
    rvalue <- pExp
    semi
    return (Assign (Variable ident sidcat) rvalue)
    <?> "Assign statement"

pCall = do
    reserved "call"
    ident   <- identifier
    char '('
    expList <- sepBy pExp comma
--    explist <- optional (sepBy pExp comma)
    char ')'
    semi
    return (Call ident expList)
    <?> "Call statement"

pIf =
    try( do
        { reserved "if"
        ; exp   <- pExp
        ; reserved "then"
        ; stmts <- many1 pStmt
        ; reserved "fi"
        ; return (If exp stmts)
        })
    <|> do
        { reserved "if"
        ; exp    <- pExp
        ; reserved "then"
        ; stmts1 <- many1 pStmt
        ; reserved "else"
        ; stmts2 <- many1 pStmt
        ; reserved "fi"
        ; return (IfElse exp stmts1 stmts2)
        }
    <?> "If statement"

pWhile = do
    reserved "while"
    exp   <- pExp
    reserved "do"
    stmts <- many1 pStmt
    reserved "od"
    return (While exp stmts)
    <?> "While statement"

-----------------------------------------------------------------
-- define expressions
-- expression contains operations, relations, expressions, string
-- and boolean
-----------------------------------------------------------------
pExp, pNum, pIdent, pString, pBool :: Parser Expr

pExp
 = buildExpressionParser table pFac

pFac :: Parser Expr
pFac = choice [parens pExp, pNum, pIdent, pBool]

table = [[prefix   "-" UnaryMinus]
        ,[binary   "*" Mul, binary   "/"  Div]
        ,[binary   "+" Add, binary   "-"  Sub]
        ,[relation "=" Eq,  relation "!=" NotEq
        , relation "<" Les, relation "<=" LesEq
        , relation ">" Grt, relation ">=" GrtEq]
        ,[prefix   "!" UnaryNot]
        ,[binary   "&&" And]
        ,[binary   "||" Or]]

prefix name func
    = Prefix (do {reservedOp name; return func})

binary name op
    = Infix (do {reservedOp name; return op}) AssocLeft

relation name rel
    = Infix (do {reservedOp name; return rel}) AssocNone

pNum =
     try ( do { n <- many1 digit
           ; char '.' <?> "float"
           ; m <- many1 digit
           ; return (FloatConst (read (n ++ "." ++m) :: Float))
           }
         )
    <|>
           do { n <- natural <?> "integer"
           ; return (IntConst (fromInteger n :: Int))
           }

pExprSIndicator :: Parser SIndicator
pExprSIndicator =
    try (do { char '['
            ; exp   <- pExp
            ; char ']'
            ; return (Array exp)
            }
        )
    <|>
    try (do { char '['
            ; expM   <- pExp
            ; comma
            ; expN   <- pExp
            ; char ']'
            ; return (Matrix expM expN)
            })
    <|>  do { return (NoIndicator) }

pIdent
  = do
      ident <- identifier
      sidcat <- pExprSIndicator
      return (ExprVar (Variable ident sidcat))
      <?>
      "identifier"

pString
  = do
      char '"'
      str <- many (satisfy (/= '"'))
      char '"'
      return (StrConst str)
      <?>
      "string"

pBool
  = do {reserved "true"; return (BoolConst True)}
    <|>
    do {reserved "false"; return (BoolConst False)}
    <?>
    "bool"

pMain :: Parser GoatProgram
pMain
  = do
    whiteSpace
    p <- pProg
    eof
    return p
